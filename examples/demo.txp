(* #FORMAT FormatSlides *)
(* #PACKAGE mysql *)
(* #PACKAGE Patoline.Interactive *)

\Caml(
open Diagrams
open Proj3d
open Db
open DefaultFormat

let caml x = x

(*
let db_info = Mysql.(
    { defaults with
      dbhost = Some "localhost";
      dbname = Some "demo";
      dbpwd = Some "demo";
      dbuser = Some "demo";})

let db = Db.init_db (module DbMysql) "demo" db_info
 *)

let db = Db.init_db (module DbMemory) "demo" ()

module MyDb = struct
  let db = db
  let base_dir = "/tmp"
end

module Interactive =
  Interactive.Make(D)(Patoline_Format)(MyDb)
open Interactive

let _ = Printexc.record_backtrace true
)


\begin{slide}
\begin{center}
\size(5.0){Interactive Patoline}
\Caml(
let img file =
  [bB (fun env->
     let d = Document.image ~offset:(-7.0) ~height:40.0 file env in
     [Drawing d])]
)


\img("titleduck.png")
\end{center}
\end{slide}



== Dynamisme ==

\begin{slide}
\begin{itemize}

\Caml(let count = db.create_data ~visibility:Public default_coding "count" 0)
\item \button(click(fun () ->let c = count.read () + 1 in count.write c))
           {Un bouton} qui a été cliqué
\dynamic{0123456789 fois}(
	   fun () -> <<\caml(let c = count.read () in [tT (string_of_int c)]) fois !>>)

\Caml(let count2 = db.create_data default_coding "count2" 0)
\item \button(click(fun () -> let c = count2.read () + 1 in count2.write c))
          {Un autre bouton} qui a été cliqué
\dynamic{0123456789 fois}(
	   fun () -> <<\caml(let c = count2.read () in [tT (string_of_int c)]) fois !>>)

\item Chercher la différence entre ces deux boutons ! indication : ouvrez deux fois la présentation.

\item Et une figure dont on peut bouger les sommets :

\begin{center}
\Caml(
let s = 10.0
let s' = 14.0
let aPos = db.create_data default_coding "Apos" (s,s)
let bPos = db.create_data default_coding "Bpos" (-.s,-.s)
let cPos = db.create_data default_coding "Cpos" (s,-.s)
)
\dynamic([])(fun () -> <<
\diagram(
 let frame = Node.(node [at (0.,0.);rectangle env;draw; color (mix 0.5 white blue); innerSep 20.] [])
 let apos = aPos.read () and bpos = bPos.read () and cpos = cPos.read ()
 let av = Vector.(scal_mul 3. (normalise (apos - bpos + apos - cpos)))
 let bv = Vector.(scal_mul 3. (normalise (bpos - cpos + bpos - apos)))
 let cv = Vector.(scal_mul 3. (normalise (cpos - apos + cpos - bpos)))
 let ab = Node.(coord Point.(middle apos bpos))
 let bc = Node.(coord Point.(middle bpos cpos))
 let ca = Node.(coord Point.(middle cpos apos))
 let drag data p rel =
   let (x,y) as p = Vector.(p + data.read ()) in
   let p = if rel then (max (-.s') (min x s'), max (-.s') (min y s'))
                  else p
   in
   data.write p
 let dragA = drag aPos
 let dragB = drag bPos
 let dragC = drag cPos
 let a = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec av) env <<A>>; at apos;
		     drag(dragA)] [])
 let b = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec bv) env <<B>>; at bpos;
		     drag(dragB)] [])
 let c = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec cv) env <<C>>; at cpos;
		     drag(dragC)] [])
 let _ = edge Edge.([draw]) a b
 let _ = edge Edge.([draw]) b c
 let _ = edge Edge.([draw]) c a
 let _ = edge Edge.([draw;dashed[1.]]) a bc
 let _ = edge Edge.([draw;dashed[1.]]) b ca
 let _ = edge Edge.([draw;dashed[1.]]) c ab
)>>)

\end{center}
\end{itemize}
\end{slide}


\Caml(
let questions = ref []
)

\begin{slide}
\Title{Qui êtes-vous ?}

\begin{checkBoxes}("geekTest")(questions)
\item J'aime le nombre 42.

\item J'ai vu presque tous les épisodes de \italic{Startrek} ou \italic{Big-Bang Theory}

\item Je programme souvent

\item J'ai un casse tête que je ne sais pas résoudre

\item Mes amis me trouvent bizarre
\end{checkBoxes}

\vspaceBefore(5.0)
\begin{center}
\dynamic{Vous êtes un humain bizarre geek}(fun () ->
    let nb = List.fold_left (fun acc b -> if b.read() then succ acc else acc) 0 !questions in
    let bizarre = try (List.hd !questions).read() with _ -> false in
    if nb >= 4 then <<Vous êtes un geek>>
    else if bizarre || nb >= 2 then <<Vous êtes un humain probablement bizarre>>
    else <<Vous êtes un humain>>
)
\end{center}
\end{slide}

\Caml(
  module Data =
   struct
      type t = No_opinion | Not_clicked | Null | Fun_but | Fun_yes
      let data = db.create_data default_coding "Sondage" Not_clicked
    end
  module Env_choices = MkRadioButtons(Data)
  open Data
 )
)

\begin{slide}

\begin{center}
\size(5.0){Un petit sondage}
\vspaceAfter(5.0)
\end{center}

\begin{choices}
\item(Null) Patoline c'est null, ça ne marchera jamais.

\item(Fun_but) Patoline c'est chouette, mais ça ne marchera pas.

\item(Fun_yes) Patoline c'est chouette, et ça va casser la baraque !

\item(No_opinion) Je ne sais pas.
\end{choices}
\end{slide}

\begin{slide}
\Title{Résultats du sondage}


\begin{center}
\dynamic([])(fun () ->
let total, results = data.distribution () in
let color v = match v with
  Null -> red
| Fun_but -> yellow
| Fun_yes -> green
| No_opinion | Not_clicked -> grey
in
let values = [ Null; Fun_but; Fun_yes; No_opinion ] in
let res = List.map (fun value -> (color value, try List.assoc value results with Not_found -> 0)) values in
let m = List.fold_left (fun acc (_,n) -> max acc n) 1 res in
<<\diagram(
  let m,ms = array  [`South ; `South; `South ; `South ] (List.map (List.map mathsText) [
    List.map (fun (color, value as c) ->
      <<\diagram(
        let _ = scoreBar ~vertical:true (module Diagram : Diagram) (30.0 *. float value /. float m) 7.0 [c])>>)
      res;
    [<<Null>>; <<Fun Mais>>; <<Fun>>; <<N.S.P.>>]
]))>>)
\end{center}
\end{slide}


\begin{slide}

\begin{block}{
Un petit programme éditable, the program is compiled and executed (beware of security issues) :
}
\caml(
  editableText ~nb_lines:7 ~err_lines:3  ~lang:Verbatim.lang_OCaml ~extra:(test_ocaml ~run:true) ~init_text:"let _ = Printf.printf \"Hello World\\n\"" "testML"
)
\end{block}
\end{slide}

== Animation ==

\begin{slide}

\begin{center}
\animation(90)(fun t -> let t = float t /. 45. *. 3.1415927 in
   let proj t = {distance_focale = 55.;
   origin_transfo_x = 10.;
   origin_transfo_y = 10.;
   origin_transfo_z = 10.; (* boucle avec 10.0 *)
   origin_diag = (10.,10.,10.); (* pour que le centre du cube ne bouge pas *)
   axe_angle = 0.;
   rot_angle = t;
   homotetie = 1.0;} in
   let projection = proj t in
<<\diagram(
(*   let _ = cube projection*)
 let a = Node.(node [anchor `Base;at3d projection (0.,0.,0.)] <<a>>)
 let b = Node.(node [anchor `Base;at3d projection (20.,0.,0.)] <<b>>)
 let c = Node.(node [anchor `Base;at3d projection (20.,20.,0.)] <<c>>)
 let d = Node.(node [anchor `Base;at3d projection (0.,20.,0.)] <<d>>)
 let a' = Node.(node [anchor `Base;at3d projection (0.,0.,20.)] <<a'>>)
 let b' = Node.(node [anchor `Base;at3d projection (20.,0.,20.)] <<b'>>)
 let c' = Node.(node [anchor `Base;at3d projection (20.,20.,20.)] <<c'>>)
 let d' = Node.(node [anchor `Base;at3d projection (0.,20.,20.)] <<d'>>)


  let _ = edge_3d Edge.([arrow env;draw]) a b
  let _ = edge_3d Edge.([arrow env;draw]) d c
  let _ = edge_3d Edge.([arrow env;draw]) a d
  let _ = edge_3d Edge.([arrow env;draw]) b c

  let _ = edge_3d Edge.([arrow env;draw]) a' b'
  let _ = edge_3d Edge.([arrow env;draw]) d' c'
  let _ = edge_3d Edge.([arrow env;draw]) a' d'
  let _ = edge_3d Edge.([arrow env;draw]) b' c'

  let _ = edge_3d Edge.([arrow env;draw]) a' a
  let _ = edge_3d Edge.([arrow env;draw]) b' b
  let _ = edge_3d Edge.([arrow env;draw]) c' c
  let _ = edge_3d Edge.([arrow env;draw]) d' d

   let e' = Node.(node [at3d projection (10.,10.,10.);rectangle env;draw;innerSep 20.0] (<<x>>))

)>>)
\end{center}

\begin{center}
\size(7.0){Thanks for your attention}
\end{center}
\end{slide}
