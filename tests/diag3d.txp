(*
  Copyright Florian Hatat, Tom Hirschowitz, Pierre Hyvernat,
  Pierre-Etienne Meunier, Christophe Raffalli, Guillaume Theyssier 2012.

  This file is part of Patoline.

  Patoline is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Patoline is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Patoline.  If not, see <http://www.gnu.org/licenses/>.
*)
\Caml(
open Diagrams
open Proj3d

let cube projection = <<
\diagram(

(*  let _ = compute_intersections := (Some (fun x -> Edge.put_forth ~color:OutputCommon.orange x)) 
*)

 let a = Node.(node [anchor `Base;at3d projection (0.,0.,0.)] <<a>>) 
 let b = Node.(node [anchor `Base;at3d projection (20.,0.,0.)] <<b>>)
 let c = Node.(node [anchor `Base;at3d projection (20.,20.,0.)] <<c>>)
 let d = Node.(node [anchor `Base;at3d projection (0.,20.,0.)] <<d>>)
 let a' = Node.(node [anchor `Base;at3d projection (0.,0.,20.)] <<a'>>) 
 let b' = Node.(node [anchor `Base;at3d projection (20.,0.,20.)] <<b'>>) 
 let c' = Node.(node [anchor `Base;at3d projection (20.,20.,20.)] <<c'>>) 
 let d' = Node.(node [anchor `Base;at3d projection (0.,20.,20.)] <<d'>>) 


  let _ = edge_3d Edge.([arrow env;draw]) a b
  let _ = edge_3d Edge.([arrow env;draw]) d c
  let _ = edge_3d Edge.([arrow env;draw]) a d
  let _ = edge_3d Edge.([arrow env;draw]) b c

  let _ = edge_3d Edge.([arrow env;draw]) a' b'
  let _ = edge_3d Edge.([arrow env;draw]) d' c'
  let _ = edge_3d Edge.([arrow env;draw]) a' d'
  let _ = edge_3d Edge.([arrow env;draw]) b' c'

  let _ = edge_3d Edge.([arrow env;draw]) a' a
  let _ = edge_3d Edge.([arrow env;draw]) b' b
  let _ = edge_3d Edge.([arrow env;draw]) c' c
  let _ = edge_3d Edge.([arrow env;draw]) d' d

)>>)


\begin{center}
\cube(cavaliere60hd)
\hspace(3.)
\cube(cavaliere45hd)
\end{center}

\begin{center}
\cube({ rot_y45d with origin_transfo_x = 10.; origin_transfo_y = 10.} )
\hspace(3.)
\cube({ rot_y30d with origin_transfo_x = 10.; origin_transfo_y = 10.; distance_focale = 55.} )
\end{center}


\begin{center}
\animation(180)(fun t -> let t = float t /. 90. *. 3.1415927 in
   let proj t = {distance_focale = 55.;
   origin_transfo_x = 10.;
   origin_transfo_y = 10.;
   origin_transfo_z = 10.; (* boucle avec 10.0 *)
   origin_diag = (10.,10.,10.); (* pour que le centre du cube ne bouge pas *)
   axe_angle = 0.;
   rot_angle = t;
   homotetie = 1.0;} in
   let projection = proj t in
<<\diagram(
(*   let _ = cube projection*)
 let a = Node.(node [anchor `Base;at3d projection (0.,0.,0.)] <<a>>) 
 let b = Node.(node [anchor `Base;at3d projection (20.,0.,0.)] <<b>>)
 let c = Node.(node [anchor `Base;at3d projection (20.,20.,0.)] <<c>>)
 let d = Node.(node [anchor `Base;at3d projection (0.,20.,0.)] <<d>>)
 let a' = Node.(node [anchor `Base;at3d projection (0.,0.,20.)] <<a'>>) 
 let b' = Node.(node [anchor `Base;at3d projection (20.,0.,20.)] <<b'>>) 
 let c' = Node.(node [anchor `Base;at3d projection (20.,20.,20.)] <<c'>>) 
 let d' = Node.(node [anchor `Base;at3d projection (0.,20.,20.)] <<d'>>) 


  let _ = edge_3d Edge.([arrow env;draw]) a b
  let _ = edge_3d Edge.([arrow env;draw]) d c
  let _ = edge_3d Edge.([arrow env;draw]) a d
  let _ = edge_3d Edge.([arrow env;draw]) b c

  let _ = edge_3d Edge.([arrow env;draw]) a' b'
  let _ = edge_3d Edge.([arrow env;draw]) d' c'
  let _ = edge_3d Edge.([arrow env;draw]) a' d'
  let _ = edge_3d Edge.([arrow env;draw]) b' c'

  let _ = edge_3d Edge.([arrow env;draw]) a' a
  let _ = edge_3d Edge.([arrow env;draw]) b' b
  let _ = edge_3d Edge.([arrow env;draw]) c' c
  let _ = edge_3d Edge.([arrow env;draw]) d' d

   let e' = Node.(node [at3d projection (10.,10.,10.);rectangle env;draw;innerSep 20.0] (<<x>>))

)>>)
\end{center}



