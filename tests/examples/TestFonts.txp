==============================================================================
                     Test de toutes les fontes en vrac
==============================================================================

\Caml(

let fonts_dir = "../Fonts"
let pangramme =
  "Portez ce vieux whisky au juge blond qui fume sur son île intérieure, à \
   côté de l'alcôve ovoïde, où les bûches se consument dans l'âtre, ce qui \
   lui permet de penser à la cænogénèse de l'être dont il est question dans \
   la cause ambiguë entendue à Moÿ, dans un capharnaüm qui, pense-t-il, \
   diminue çà et là la qualité de son œuvre."

let all_fonts =
  let rec find : string -> string list = fun path ->
    let files = Array.to_list (Sys.readdir path) in
    let files = List.map (Filename.concat path) files in
    let handle fn = if Sys.is_directory fn then find fn else [fn] in
    List.concat (List.map handle files)
  in
  let is_font fn =
    let len = String.length fn in
    if len < 4 then false else
    let ext = String.sub fn (len - 4) 4 in
    (ext = ".otf" || ext = ".ttf")
  in
  let files = List.filter is_font (find fonts_dir) in
  List.sort String.compare files

let newPar indent =
  let param = Patoline_Format.parameters in
  let environment env =
    if indent then env else {env with par_indent = []}
  in
  newPar ~environment D.structure Complete.normal param

let fontPar name =
  let font = Fonts.loadFont name in
  let feat = String.concat ", " (Fonts.font_features font) in
  let text = (linesBefore 2) @ ((tT pangramme) :: (linesAfter 2)) in
  newPar false [tT ("Font : " ^ name)];
  newPar false [tT ("Features : " ^ feat)];
  newPar true  (Document.font font text)

let _ =  List.iter fontPar all_fonts

)
