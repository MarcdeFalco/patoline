(*
  Copyright Florian Hatat, Tom Hirschowitz, Pierre Hyvernat,
  Pierre-Etienne Meunier, Christophe Raffalli, Guillaume Theyssier 2012.

  This file is part of Patoline.

  Patoline is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Patoline is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Patoline.  If not, see <http://www.gnu.org/licenses/>.
*)
\Caml(open Diagrams

let _ = Sys.catch_break true; Printexc.record_backtrace true

let xrightarrows ?margin:(margin=2.) ?width:(width=1.) ?translation:(translation=(-. 3000.)) =
  xarrow 
    ~decoration:(fun env ms ->
	    let translation = (if translation = -. 3000. then 2. *. ex env else translation) in
	    let e = Edge.(make
			    [draw;lineWidth 0.1;arrow env (* Of head *)] 
			    (Node.coord (Vector.(+) (ms.(0).(0).Node.anchor (`Main)) (0., -. 0.33 *. translation)))
			    (Node.coord (Vector.(+) (ms.(0).(1).Node.anchor (`Main)) (0.,-. 0.33 *. translation))))
	    in
	    let e' = Edge.(make
			     [draw;lineWidth 0.1;arrow env (* Of head *)] 
			     (Node.coord (Vector.(+) (ms.(0).(0).Node.anchor (`Main)) (0., 0.7 *. translation)))
			     (Node.coord (Vector.(+) (ms.(0).(1).Node.anchor (`Main)) (0.,0.7 *. translation))))
	    in
	    let middle = e'.anchor (`Temporal 0.5) in
	    ([Edge e; Edge e'], middle))

)

$[0] \id(xrightarrows <$s,t$>) [1]$


\diagram(
  let m,ms = Matrix.(math_matrix [centers 20. 20.;mainNode [Node.anchor `Pdf]] 
		       [[([],<$asthsth$>) ; ([],<$AAAAA$>) ]])
  let es = edges_anchor_mid [
    (ms.(0).(0),ms.(0).(1),[],`North,[]) ;
    (Node.coord (ms.(0).(0).Node.anchor (`Angle 30.)), Node.coord (ms.(0).(1).Node.anchor (`Angle 150.)),[],`South,<<$s,t$>>) ;
    (Node.coord (ms.(0).(0).Node.anchor (`Angle 0.)), Node.coord (ms.(0).(1).Node.anchor (`Angle 180.)),[],`South,[]) ; 
    (Node.coord (ms.(0).(0).Node.anchor (`Angle (-. 30.))), Node.coord (ms.(0).(1).Node.anchor (`Angle 210.)),[],`South,[]) ; 
    (Node.coord (ms.(0).(0).Node.anchor (`Angle 45.)), Node.coord (ms.(0).(1).Node.anchor (`Angle 135.)),[],`South,[]) ; 
    (Node.coord (ms.(0).(0).Node.anchor (`Angle 90.)), Node.coord (ms.(0).(1).Node.anchor (`Angle 90.)),[Edge.bendLeft 30.],`South,[]) ; 
  ]
)
